"use strict";(self.webpackChunksvgo_dev=self.webpackChunksvgo_dev||[]).push([[8524],{4196:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"plugins/convertColors","title":"convertColors","description":"Converts color references to the shortest equivalent.","source":"@site/.svgo/docs/04-plugins/convertColors.mdx","sourceDirName":"04-plugins","slug":"/plugins/convertColors","permalink":"/docs/plugins/convertColors","draft":false,"unlisted":false,"editUrl":"https://github.com/svg/svgo/tree/main/docs/04-plugins/convertColors.mdx","tags":[],"version":"current","frontMatter":{"title":"convertColors","svgo":{"pluginId":"convertColors","defaultPlugin":true,"parameters":{"currentColor":{"description":"<p>If to convert all instances of a color to <code>currentColor</code>. This means to inherit the active foreground color, for example in HTML5 this would be the <a href=\\"https://developer.mozilla.org/docs/Web/CSS/color\\"><code>color</code></a> property in CSS.</p>","default":false},"names2hex":{"description":"<p>If to convert color names to the hex equivalent.</p>","default":true},"rgb2hex":{"description":"<p>If to convert RGB colors to the hex equivalent, ignores RGBA.</p>","default":true},"convertCase":{"description":"<p>Convert all color values to either upper or lower case by setting this to <code>\'upper\'</code> or <code>\'lower\'</code> respectively to improve compression. Set to <code>false</code> to disable this behavior.</p>","default":"lower"},"shorthex":{"description":"<p>If to convert 6 character hex colors to the 3 character equivalent where possible.</p>","default":true},"shortname":{"description":"<p>If to convert hex colors to the color name, if the color name is shorter then the hex equivalent.</p>","default":true}}}},"sidebar":"docsSidebar","previous":{"title":"collapseGroups","permalink":"/docs/plugins/collapseGroups"},"next":{"title":"convertEllipseToCircle","permalink":"/docs/plugins/convertEllipseToCircle"}}');var c=t(9801),n=t(8453);const l={title:"convertColors",svgo:{pluginId:"convertColors",defaultPlugin:!0,parameters:{currentColor:{description:'<p>If to convert all instances of a color to <code>currentColor</code>. This means to inherit the active foreground color, for example in HTML5 this would be the <a href="https://developer.mozilla.org/docs/Web/CSS/color"><code>color</code></a> property in CSS.</p>',default:!1},names2hex:{description:"<p>If to convert color names to the hex equivalent.</p>",default:!0},rgb2hex:{description:"<p>If to convert RGB colors to the hex equivalent, ignores RGBA.</p>",default:!0},convertCase:{description:"<p>Convert all color values to either upper or lower case by setting this to <code>'upper'</code> or <code>'lower'</code> respectively to improve compression. Set to <code>false</code> to disable this behavior.</p>",default:"lower"},shorthex:{description:"<p>If to convert 6 character hex colors to the 3 character equivalent where possible.</p>",default:!0},shortname:{description:"<p>If to convert hex colors to the color name, if the color name is shorter then the hex equivalent.</p>",default:!0}}}},d=void 0,i={},s=[];function h(e){const o={code:"code",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,c.FD)(c.FK,{children:[(0,c.Y)(o.p,{children:"Converts color references to the shortest equivalent."}),"\n",(0,c.Y)(o.p,{children:"Colors can be represented in various notations, the following table showcases some equivalent colors:"}),"\n",(0,c.FD)(o.table,{children:[(0,c.Y)(o.thead,{children:(0,c.FD)(o.tr,{children:[(0,c.Y)(o.th,{children:"Name"}),(0,c.Y)(o.th,{children:"rgb()"}),(0,c.Y)(o.th,{children:"#rrggbb"}),(0,c.Y)(o.th,{children:"#rgb"})]})}),(0,c.FD)(o.tbody,{children:[(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"red"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(255, 0, 0)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#ff0000"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#f00"})})]}),(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"orange"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(255, 165, 0)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#ffa500"})}),(0,c.Y)(o.td,{})]}),(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"yellow"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(255, 255, 0)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#ffff00"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#ff0"})})]}),(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"green"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(0, 128, 0)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#008000"})}),(0,c.Y)(o.td,{})]}),(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"blue"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(0, 0, 255)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#0000FF"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#00f"})})]}),(0,c.FD)(o.tr,{children:[(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"purple"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"rgb(128, 0, 128)"})}),(0,c.Y)(o.td,{children:(0,c.Y)(o.code,{children:"#800080"})}),(0,c.Y)(o.td,{})]})]})]}),"\n",(0,c.Y)(o.p,{children:"It makes no difference which format is received by a client, and each one has wide support across browsers and image viewing software."})]})}function a(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,c.Y)(o,{...e,children:(0,c.Y)(h,{...e})}):h(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>l,x:()=>d});var r=t(1098);const c={},n=r.default.createContext(c);function l(e){const o=r.default.useContext(n);return r.default.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),r.default.createElement(n.Provider,{value:o},e.children)}}}]);