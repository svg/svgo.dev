"use strict";(self.webpackChunksvgo_dev=self.webpackChunksvgo_dev||[]).push([[1979],{4099:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>d,contentTitle:()=>n,default:()=>a,frontMatter:()=>c,metadata:()=>l,toc:()=>i});var t=r(5893),s=r(1151);const c={title:"convertColors",svgo:{pluginId:"convertColors",defaultPlugin:!0,parameters:{currentColor:{description:'<p>If to convert all instances of a color to <code>currentcolor</code>. This means to inherit the active foreground color, for example in HTML5 this would be the <a href="https://developer.mozilla.org/docs/Web/CSS/color"><code>color</code></a> property in CSS.</p>',default:!1},names2hex:{description:"<p>If to convert color names to the hex equivalent.</p>",default:!0},rgb2hex:{description:"<p>If to convert RGB colors to the hex equivalent, ignores RGBA.</p>",default:!0},convertCase:{description:"<p>Convert all color values to either upper or lower case by setting this to <code>'upper'</code> or <code>'lower'</code> respectively to improve compression. Set to <code>false</code> to disable this behavior.</p>",default:"lower"},shorthex:{description:"<p>If to convert 6 character hex colors to the 3 character equivalent where possible.</p>",default:!0},shortname:{description:"<p>If to convert hex colors to the color name, if the color name is shorter then the hex equivalent.</p>",default:!0}}}},n=void 0,l={id:"plugins/convertColors",title:"convertColors",description:"Converts color references to the shortest equivalent.",source:"@site/.svgo/docs/03-plugins/convertColors.mdx",sourceDirName:"03-plugins",slug:"/plugins/convertColors",permalink:"/docs/plugins/convertColors",draft:!1,unlisted:!1,editUrl:"https://github.com/svg/svgo/tree/main/docs/03-plugins/convertColors.mdx",tags:[],version:"current",frontMatter:{title:"convertColors",svgo:{pluginId:"convertColors",defaultPlugin:!0,parameters:{currentColor:{description:'<p>If to convert all instances of a color to <code>currentcolor</code>. This means to inherit the active foreground color, for example in HTML5 this would be the <a href="https://developer.mozilla.org/docs/Web/CSS/color"><code>color</code></a> property in CSS.</p>',default:!1},names2hex:{description:"<p>If to convert color names to the hex equivalent.</p>",default:!0},rgb2hex:{description:"<p>If to convert RGB colors to the hex equivalent, ignores RGBA.</p>",default:!0},convertCase:{description:"<p>Convert all color values to either upper or lower case by setting this to <code>'upper'</code> or <code>'lower'</code> respectively to improve compression. Set to <code>false</code> to disable this behavior.</p>",default:"lower"},shorthex:{description:"<p>If to convert 6 character hex colors to the 3 character equivalent where possible.</p>",default:!0},shortname:{description:"<p>If to convert hex colors to the color name, if the color name is shorter then the hex equivalent.</p>",default:!0}}}},sidebar:"docsSidebar",previous:{title:"collapseGroups",permalink:"/docs/plugins/collapseGroups"},next:{title:"convertEllipseToCircle",permalink:"/docs/plugins/convertEllipseToCircle"}},d={},i=[];function h(e){const o={code:"code",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"Converts color references to the shortest equivalent."}),"\n",(0,t.jsx)(o.p,{children:"Colors can be represented in various notations, the following table showcases some equivalent colors:"}),"\n",(0,t.jsxs)(o.table,{children:[(0,t.jsx)(o.thead,{children:(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.th,{children:"Name"}),(0,t.jsx)(o.th,{children:"rgb()"}),(0,t.jsx)(o.th,{children:"#rrggbb"}),(0,t.jsx)(o.th,{children:"#rgb"})]})}),(0,t.jsxs)(o.tbody,{children:[(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"red"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(255, 0, 0)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#ff0000"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#f00"})})]}),(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"orange"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(255, 165, 0)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#ffa500"})}),(0,t.jsx)(o.td,{})]}),(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"yellow"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(255, 255, 0)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#ffff00"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#ff0"})})]}),(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"green"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(0, 128, 0)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#008000"})}),(0,t.jsx)(o.td,{})]}),(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"blue"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(0, 0, 255)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#0000FF"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#00f"})})]}),(0,t.jsxs)(o.tr,{children:[(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"purple"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"rgb(128, 0, 128)"})}),(0,t.jsx)(o.td,{children:(0,t.jsx)(o.code,{children:"#800080"})}),(0,t.jsx)(o.td,{})]})]})]}),"\n",(0,t.jsx)(o.p,{children:"It makes no difference which format is received by a client, and each one has wide support across browsers and image viewing software."})]})}function a(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,o,r)=>{r.d(o,{Z:()=>l,a:()=>n});var t=r(7294);const s={},c=t.createContext(s);function n(e){const o=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),t.createElement(c.Provider,{value:o},e.children)}}}]);